"""
Template for fabric
"""
from __future__ import with_statement
from fabric.api import run, settings, puts, cd, lcd, local, hosts
from fabric.colors import yellow, red


#-- EDIT
HOST = '' # e.g. seb@bla.com
REMOTE_BASE_DIR = ''  # absolute path, where project/repo lives
REMOTE_ERR_FILE = ''  # absolute path
REMOTE_LOG_FILE = ''  # absolute path
REPO_NAME = '{{name}}'
REPO_URL = '{{giturl}}'  # e.g. github url


@hosts('%s' % HOST) # only for deploy to production
def logs():
    """ Reading remote log files and print to stdout. """
    puts(yellow("[Reading log-file]"))
    run("cat %s" % REMOTE_ERR_FILE)
    run("cat %s" % REMOTE_LOG_FILE)


@hosts('%s' % HOST) # only for deploy to production
def deploy():
    """ Deploy project to remote hosts. """
    remote_dir = os.path.abspath(os.path.join(REMOTE_BASE_DIR, REPO_NAME))
    
    with settings(warn_only=True):
        if run("test -d %s" % (remote_dir)).failed:
            puts(red("[Repo %s does not exist on remote at: %s]" % (REPO_NAME, remote_dir)))
            with cd(REMOTE_BASE_DIR):
                run("git clone %s %s" % (REPO_URL, REPO_NAME))

    puts(yellow("[Write logs]"))
    run("echo '-----------------------------' > %s" % REMOTE_ERR_FILE)
    run("echo `date` >> %s" % REMOTE_ERR_FILE)
    run("echo '-----------------------------' >> %s" % REMOTE_ERR_FILE)
    run("echo '-----------------------------' > %s" % REMOTE_LOG_FILE)
    run("echo `date` >> %s" % REMOTE_LOG_FILE)
    run("echo '-----------------------------' >> %s" % REMOTE_LOG_FILE)

    puts(yellow("[Update repo: %s]" % REPO_NAME))
    with cd(remote_dir):
        run("git pull >> %s 2>> %s" %
            (REMOTE_LOG_FILE, REMOTE_ERR_FILE))


def deploy_local(localdir='~/Dropbox/Public'):
    """ Deploy project to local dropbox folder"""
    local_dir = os.path.abspath(os.path.join(localdir, REPO_NAME))
    with settings(warn_only=True):
        if local("test -d %s" % (local_dir)).failed:
            puts(red("[Repo %s does not exist in %s.]" % (REPO_NAME, local_dir)))
            puts(yellow("[Cloning repo %s into %s.]" % (REPO_NAME, local_dir)))
            with lcd(local_dir):
                local('git clone %s %s' % (REPO_URL, REPO_NAME))
        else:
            puts(yellow("[Pulling newest changes of repo %s into %s.]" %
                        (REPO_NAME, local_dir)))
            with lcd(local_dir):
                local("git pull")


def git_setup(localdir='.', flow=True, remote=False):
    """
    flow: use git-flow -> highly recommended
    """
    # Setting up git repo
    with settings(warn_only=True):
        if local("test -d %s/.git" % (localdir)).failed:
	    with cd(localdir):	   
                puts(red("[Not a git repo]"))
                if flow:
                    puts(yellow("[Initialise git using git-flow]"))
                    local('git flow init -d')
                else:
                    puts(yellow("[Initialise git.]"))
                    local('git init')
                    local('git co -b develop')

                local('git add -f .gitignore; git commit -m "Added .gitignore"')

                if remote:
                    puts(yellow("[Add git-remote.]"))
                    local('git remote add origin %s' % (REPO_URL))
        else:
            puts(red("[Git repo already exists]"))
	    with cd(localdir):	   
                if flow:		   
                    puts(yellow("[Initialise git-flow]"))
                    local('git flow init -d')
                if remote:
                    puts(yellow("[Add git-remote.]"))
                    local('git remote add origin %s' % (REPO_URL))

