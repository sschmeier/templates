"""
Template for fabric
"""
from __future__ import with_statement
from fabric.api import run, settings, puts, cd, lcd, local, hosts
from fabric.colors import yellow, red


#-- EDIT
HOST = '' # e.g. seb@bla.com
REMOTE_BASE_DIR = ''  # absolute path, where project/repo lives
REMOTE_ERR_FILE = ''  # absolute path
REMOTE_LOG_FILE = ''  # absolute path
REPO_NAME = '{{name}}'
REPO_URL = '{{giturl}}'  # e.g. github url
REPO_BRANCH = '{{branch}}'


@hosts('%s' % HOST) # only for deploy to production
def logs():
    """ Reading remote log files and print to stdout. """
    puts(yellow("[Reading log-file]"))
    run("cat %s" % REMOTE_ERR_FILE)
    run("cat %s" % REMOTE_LOG_FILE)


@hosts('%s' % HOST) # only for deploy to production
def deploy():
    """ Deploy project to remote hosts. """
    remote_dir = os.path.abspath(os.path.join(REMOTE_BASE_DIR, REPO_NAME))
    
    with settings(warn_only=True):
        if run("test -d %s" % (remote_dir)).failed:
            puts(red("[Repo %s does not exist on remote at: %s]" % (REPO_NAME, remote_dir)))
            with cd(REMOTE_BASE_DIR):
                run("git clone -b %s %s %s" % (REPO_BRANCH, REPO_URL, REPO_NAME))

    puts(yellow("[Write logs]"))
    run("echo '-----------------------------' > %s" % REMOTE_ERR_FILE)
    run("echo `date` >> %s" % REMOTE_ERR_FILE)
    run("echo '-----------------------------' >> %s" % REMOTE_ERR_FILE)
    run("echo '-----------------------------' > %s" % REMOTE_LOG_FILE)
    run("echo `date` >> %s" % REMOTE_LOG_FILE)
    run("echo '-----------------------------' >> %s" % REMOTE_LOG_FILE)

    puts(yellow("[Update repo: %s]" % REPO_NAME))
    with cd(remote_dir):
        run("git pull origin %s >> %s 2>> %s" %
            (REPO_BRANCH, REMOTE_LOG_FILE, REMOTE_ERR_FILE))


def deploy_local(localdir='~/Dropbox/Public'):
    """ Deploy project to local dropbox folder"""
    local_dir = os.path.abspath(os.path.join(localdir, REPO_NAME))
    with settings(warn_only=True):
        if local("test -d %s" % (local_dir)).failed:
            puts(red("[Repo %s does not exist in %s.]" % (REPO_NAME, local_dir)))
            puts(yellow("[Cloning repo %s into %s.]" % (REPO_NAME, local_dir)))
            with lcd(local_dir):
                local('git clone -b %s %s %s' % (REPO_BRANCH, REPO_URL, REPO_NAME))
        else:
            puts(yellow("[Pulling newest changes of branch %s of repo %s into %s.]" %
                        (REPO_BRANCH, REPO_NAME, local_dir)))
            with lcd(local_dir):
                local("git pull origin %s" % REPO_BRANCH)


def git(br, v=None):
    """Execute local git cheackout master, merge branch into master and push to remote.

    Keyword arguments:
    br -- the branch that should be merged into master.
    v -- new version/tag number requested this will create a repo tag.

    Usage:
    fab github:br='new_feature',v='v1.2.5'
    """

    # co master and merge
    puts(yellow("[Checkout master]"))
    local("git checkout master")

    puts(yellow("[Merge branch '%s' into master]"%br))
    local("git merge %s --no-ff" %br)

    with settings(warn_only=True):
        if v:
            puts(yellow("[Bump version: %s]"%v))
            # bump version number: project specific
            local("sed -i '' 's/v.\..\../%s/g' config.json" %v)
            # add config.json and commit
            local("git add config.json")
            local('git commit -m "Bumped to %s"' %v)

            # add tag
            puts(yellow("[Tag new version: %s]"%v))
            local('git tag -a %s'%v)

    # deploy
    puts(yellow("[Deploy to origin]"))
    local("git push origin master")
