"""
Template for fabric
"""
from __future__ import with_statement
from fabric.api import run, settings, puts, cd, lcd, local
from fabric.colors import yellow, red

#-- EDIT
REMOTE_BASE_DIR = ''  # edit remote base dir path, where project/repo lives
REMOTE_ERR_FILE = ''  # edit path
REMOTE_LOG_FILE = ''  # edit path
NAME = '{{name}}'
GITURL = '{{giturl}}'


#-- EDIT
@hosts('')  # add remotes for deploy
def logs():
    """ Reading remote log files and print to stdout. """
    puts(yellow("[Reading log-file]"))
    run("cat %s" % REMOTE_ERR_FILE)
    run("cat %s" % REMOTE_LOG_FILE)


#-- EDIT
@hosts('')  # only for deploy
def deploy():
    """ Deploy project to remote hosts. """
    with settings(warn_only=True):
        if run("test -d %s/%s" % (REMOTE_BASE_DIR, NAME)).failed:
            puts(red("[Repo does not exist on remote: %s]" % NAME))
            with cd(REMOTE_BASE_DIR):
                run("git clone %s %s" % (GITURL, NAME))

    puts(yellow("[Write logs]"))
    run("echo '-----------------------------' > %s" % REMOTE_ERR_FILE)
    run("echo `date` >> %s" % REMOTE_ERR_FILE)
    run("echo '-----------------------------' >> %s" % REMOTE_ERR_FILE)
    run("echo '-----------------------------' > %s" % REMOTE_LOG_FILE)
    run("echo `date` >> %s" % REMOTE_LOG_FILE)
    run("echo '-----------------------------' >> %s" % REMOTE_LOG_FILE)

    puts(yellow("[Update repo: %s]" % NAME))
    with cd(REMOTE_BASE_DIR):
        run("git -C %s pull >> %s 2>> %s" %
            (NAME, REMOTE_LOG_FILE, REMOTE_ERR_FILE))


def deploy_local(localdir='~/Dropbox/Public'):
    """ Deploy project to local """
    with settings(warn_only=True):
        if local("test -d %s/%s" % (localdir, NAME)).failed:
            puts(red("[Repo does not exist in %s/%s.]" % (localdir, NAME)))
            puts(yellow("[Cloning repo into %s/%s.]" % (localdir, NAME)))
            with lcd(localdir):
                local('git clone %s %s' % (GITURL, NAME))
        else:
            puts(yellow("[Pulling newest changes into %s/%s.]" % (localdir,
                                                                  NAME)))
            with lcd(localdir):
                local("git -C %s pull" % (NAME))


def git_setup(localdir='.', flow=True, remote=False):
    """
    flow: use git-flow -> highly recommended
    """
    # Setting up git repo
    with settings(warn_only=True):
        if local("test -d %s/.git" % (localdir)).failed:
            puts(red("[Not a git repo]"))
            if flow:
                puts(yellow("[Initialise git using git-flow]"))
                local('git flow init -d')
            else:
                puts(yellow("[Initialise git.]"))
                local('git init')
                local('git co -b develop')

            local('git add -f .gitignore; git commit -m "Added .gitignore"')

            if remote:
                puts(yellow("[Add git-remote.]"))
                local('git remote add origin %s' % (GITURL))
        else:
            puts(red("[Git repo already exists]"))
            if flow:
                puts(yellow("[Initialise git-flow]"))
                local('git flow init -d')
            if remote:
                puts(yellow("[Add git-remote.]"))
                local('git remote add origin %s' % (GITURL))


def git_update(branch='master', submodules=False):
    """ Pull in changes from remote """
    with settings(warn_only=True):
        local("git pull origin %s" % (branch))
    if submodules:
        with settings(warn_only=True):
            local("git submodule update --remote --merge")
